from aiogram import types
from aiogram.dispatcher.filters.state import State, StatesGroup

from bot.db.requests import check_or_update_category, get_all_id_and_categories
from bot.utils.api.api_openai import get_advice_chatgpt
from bot import dp, bot


class RegistrationStates(StatesGroup):
    category = State()


# –î–ª—è –æ—Ç–∑—ã–≤–æ–≤
@dp.message_handler(commands=['feedback'])
async def send_message_to_group(message: types.Message):
    chat_id = -1001815446276  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã
    await bot.send_message(chat_id=chat_id, text=message.text)
    await message.answer('üì£ –ú—ã –≤—Å–µ–≥–¥–∞ –æ—Ç–∫—Ä—ã—Ç—ã –∫ –≤–∞—à–∏–º –ø–æ–∂–µ–ª–∞–Ω–∏—è–º! –°–ø–∞—Å–∏–±–æ –æ–≥—Ä–æ–º–Ω–æ–µ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! üôåüåü')


# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–≤–µ—Ç–∞
async def send_advice():
    users = get_all_id_and_categories()
    for user in users:
        id, category = user

        advice = get_advice_chatgpt(category)
        await bot.send_message(id, advice)


@dp.callback_query_handler(state=RegistrationStates.category)
async def get_advice(callback: types.CallbackQuery):
    category = callback.data
    message = f"üîî –í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category}!\n\n" \
              f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä! –¢–µ–ø–µ—Ä—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤–∞–º –±—É–¥–µ—Ç " \
              f"–æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å–æ–≤–µ—Ç –ø–æ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –û—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å –Ω–∞ " \
              f"—Å–≤—è–∑–∏ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –ø–æ–ª–µ–∑–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏! üí°üí™"
    if check_or_update_category(user_id=callback.from_user.id, category_user=category):
        await bot.send_message(callback.from_user.id, message)
    else:
        await bot.send_message(callback.from_user.id, message)
        await bot.send_message(callback.from_user.id, 'üëã –í–æ—Ç –∏ –ø–µ—Ä–≤—ã–π —Å–æ–≤–µ—Ç! üòâ')

        advice = get_advice_chatgpt(category)
        await bot.send_message(callback.from_user.id, advice)
